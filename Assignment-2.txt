1)1.Create a plsql procedure, that copy the all record of department_id, department_name and
location_id of all departments that located in country_id of "US" to a table called "Department_US" using the
cursor with basic loop.
Display how many rows were copied , if not then display the message "NO RECORDS FOUND".

Note :create a table Department_US with
structure ((HR SCHEME)
Field Name Datatype
----------------- -------------
Department_Id number
Department_name varchar2(40)
Location_id number


create or replace PROCEDURE PROCQ 
(
  COUNTRY_ID IN VARCHAR2 
) AS 
cursor c_emp is select department_id,department_name,location_id 
from Department_US 
where country_id ='US';
v_deptid  Department_US.department_id%type;
v_deptname  Department_US.department_name%type;
v_locid Department_US.location_id%type;
v_count number:= 0;
BEGIN
  open c_emp;
  loop
      fetch c_emp into v_deptid,v_deptname,v_locid;
      exit when c_emp%notfound;
      insert into department_us(department_id,department_name,location_id)
      values(v_deptid,v_deptname,v_locid);
      v_count:= v_count + 1;
        end loop;
  close c_emp;
   if v_count>0
   then
   dbms_output.put_line('the total count of rows: ' || v_count);
   else
   dbms_output.put_line('NO RECORDS FOUND');
   end if;
END PROCQ;

--------------------------------------------------------------------------

2. Create a procedure named as "deleteemp( depit in number) " that delete rows from the employees table. It should accept 1 parameter, departmentId; only delete the employee records belonging to that departmentid. 
Display how many employees were deleted else raise"DeptIDNotFound"  and print the message 'No Records Found' (HR SCHEME)



create or replace PROCEDURE PROCQ2(V_DEPT_ID IN NUMBER )AS
v_emp_del number:=0;
department_id_not_found exception;
BEGIN
  --if v_dept_id%found then

  delete from emp where department_id=v_dept_id;
  v_emp_del:=v_emp_del+1;
  if v_emp_del >0 then
  dbms_output.put_line(v_emp_del);
  else
  raise department_id_not_found;
  end if;
Exception
    when department_id_not_found then
    dbms_output.put_line('no records found'); 
END PROCQ2;

----------------------------------------------------------------

3. create a proedurce that gives all employees in IT job_id, with  22 % pay increase in there salary 
     Display a message how many Employees were give salary hike the increase. If no employee found then print the message 'No Records Found' ((HR SCHEME))
	

create or replace PROCEDURE PROCQ3 AS
CURSOR emp_cursor IS
    SELECT employee_id, first_name, job_id, salary
    FROM employees
    WHERE job_id = 'IT_PROG';
 
  r_emp emp_cursor%ROWTYPE;
  new_salary NUMBER;
  count_rows NUMBER := 0;
BEGIN
  OPEN emp_cursor;
  LOOP
    FETCH emp_cursor INTO r_emp;
    EXIT WHEN emp_cursor%NOTFOUND;
    new_salary := r_emp.salary + r_emp.salary * 0.22;
    UPDATE employees SET salary = new_salary WHERE employee_id = r_emp.employee_id;
    count_rows := count_rows + 1;
  END LOOP;
  CLOSE emp_cursor;
 
  IF count_rows > 0 THEN
    DBMS_OUTPUT.PUT_LINE('The number of employees who received a salary hike: ' || count_rows);
  ELSE
    DBMS_OUTPUT.PUT_LINE('No records found');
  END IF;
END PROCQ3;


-------------------------------------------------------------------------
4. Write a procedure to perform salary hike operation that only permits a hike , if there is salary is less than  8000, then update the  salary  with employee table and print the message 'Salary Hike is successful' else print 'Salary is greater than 8000'.((HR SCHEME))  procedure named as salhike(hike  as number)


CREATE OR REPLACE PROCEDURE PROCQ4(HIKE IN NUMBER) AS
   v_count NUMBER;
BEGIN
   -- Update salary for employees earning less than 8000
   UPDATE emp 
   SET salary = salary + HIKE 
   WHERE salary < 8000;

   -- Get the number of affected rows
   v_count := SQL%ROWCOUNT;

   IF v_count > 0 THEN
      DBMS_OUTPUT.PUT_LINE('Salary Hike is successful.');
   ELSE
      DBMS_OUTPUT.PUT_LINE('Salary is greater than 8000.');
   END IF;
END PROCQ4;
------------------------------------------------------------------------

5.Write procedure to display the number of department to the location_id as 'Number of Department in location id[50] is [25]' by pass the argument to procedure as location_id with named as deptcount(loc number).

create or replace PROCEDURE PROCQ5(V_LOC_ID IN NUMBER )AS 
v_dept_count number;
BEGIN
  select count(*) into v_dept_count from departments where location_id=v_loc_id;
  dbms_output.put_line('Number of Department in location id[' || v_loc_id || '] is [' || v_dept_count || ']');
END PROCQ5;


----------------------------------------------------------------------
6.Write the procedure to copy the manager record from employees table and move records to managers table. Procedure is named with mgremp and display the "Number of record is copied is" if not then "No record insert into manager" using the basic loop with cursor.

Note: create a table mgremp with stucture
	empid		number,
	first_name	varchar2(30);
	job_id		varchar2(30);
	department_id	number..

create or replace PROCEDURE PROCQ6 AS 
cursor c_emp is select * from emp;
r_emp c_emp%rowtype;
v_count number:=0;
BEGIN
  open c_emp;
    loop
        fetch c_emp into r_emp;
        exit when c_emp%NOTFOUND;
        INSERT INTO mgremp (empid, first_name, job_id,department_id)
      VALUES (r_emp.employee_id,r_emp.first_name,r_emp.job_id,r_emp.department_id);
      v_count:=v_count+1;
    end loop;
IF v_count > 0 THEN
      DBMS_OUTPUT.PUT_LINE('Number of records copied is ' || v_count);
   ELSE
      DBMS_OUTPUT.PUT_LINE('No record inserted into manager');
   END IF;
  close c_emp;
END PROCQ6;


---------------
  FUNCTIONS:
---------------

1. Write a PLSQL user defined function as empname to concatenate firstname and lastname of an employee. Pass employee id as an input to the functions
empname  Output of function returns :-  Mr/Mrs. Sam Peter


create or replace FUNCTION FUNCQ1(EMP_ID IN NUMBER) RETURN VARCHAR2 AS 
v_firstname varchar2(20);
v_lastname varchar2(20);
v_concatname varchar2(20);
BEGIN
  select first_name,last_name into v_firstname,v_lastname from employees where employee_id=emp_id;
  v_concatname:='Mr/Mrs. '||v_firstname||' '||v_lastname;
  return v_concatname;
END FUNCQ1;


----------------------------------------------------------------------
2. Write user define function as deptloc to return departmentname-city-Country_name example "IT-NewYork-USA".Function is passed with department_id as an input

create or replace FUNCTION FUNCQ2 
(
  DEPT_ID IN NUMBER 
) RETURN VARCHAR2 AS
v_dccn varchar2(50);
v_deptname varchar2(50);
v_city varchar2(50);
v_countryname varchar2(50);
BEGIN
  select department_name,city,country_name into v_deptname,v_city,v_countryname from alljoin where department_id=dept_id;
  v_dccn:=v_deptname||'-'||v_city||'-'||v_countryname;
  return v_dccn;
END FUNCQ2;


-------------------------------------------------------------------------
3. Write function as empexp( empid number) which returns the experence of the employee, When function is passed as input of employee_id return as experence of that employee.

create or replace FUNCTION FUNCQ3(EMP_ID IN NUMBER )RETURN VARCHAR2 AS
v_firstname varchar2(20);
v_lastname varchar2(20);
v_hiredate date;
v_exp number;
BEGIN
  select first_name,last_name,hire_date into v_firstname,v_lastname,v_hiredate from employees where employee_id=emp_id;
  v_exp:=round(MONTHS_BETWEEN(SYSDATE, v_hiredate) / 12);
  return v_exp;
END FUNCQ3;


---------------------------------------------------------------------------------
4.Write a function to calculate the total salary by salary commission and  deduction of professional tax of 6% from total salary if total salary is greater than or equal to $15000 and less than 15000 is 2.5%. function named as salcal with two parameter of salary and commission.



create or replace FUNCTION FUNCQ6 
(
  SALARY IN NUMBER 
, COMMISSION IN NUMBER 
) RETURN NUMBER AS
v_total_salary NUMBER;
   v_tax_rate NUMBER;
   v_net_salary NUMBER;
BEGIN
  v_total_salary := salary + nvl(commission,salary);
  IF v_total_salary >= 15000 THEN
      v_tax_rate := 0.06; -- 6% tax for salary >= 15000
   ELSE
      v_tax_rate := 0.025; -- 2.5% tax for salary < 15000
   END IF;
    v_net_salary := v_total_salary - (v_total_salary * v_tax_rate);

   RETURN v_net_salary;
   
END FUNCQ6;


..............................................................


--------------
	TRIGGERS:
--------------

1. Write the trigger to the employee  table when the deleted event happened. 
so that when an employee record is deleted the record details need to be inserted into  an table called X_Emp along  with deleted date

Note : Assume X_emp  table is existing  with 

Field Name      datatype
--------------------------------
Employee_ID	number
First_name	Varchar2(30)
department_id	number
deleted_date	date


create or replace TRIGGER TRIGGERQ1 
BEFORE delete ON EMP1 for each row 
BEGIN
  insert into x_emp values(:old.empid,:old.empname,:old.deptid,:old.doj);
END;
-------------------------------------------------------------------------------

2. Create a tigger to display the message "Place a order for the Product <product_name>",
 when ever a item quantity reached 10 and below in product table when  updating or inserting an item in order table.
Products  table 
-----------------------
Pid	ProductName	Qty
100	Mouse		50
101	Keyboard	32
102	Pendrive	5
103	RAM		12
Order Table
------------------
Oid 	Pid  	 qty
1000	100	45
1001	101	2
1003	102	25

Output:
"Place a Order for the product Mouse


create or replace TRIGGER ADM3TRI4 BEFORE INSERT ON ORDERS for each row
declare
v_sqty number;
v_pro varchar2(30);
BEGIN
    update products set stock_in_qty=stock_in_qty-:new.qty  where productid = :new.proid;
    select productname,stock_in_qty into v_pro, v_sqty from products where productid =:new.proid;
    if v_sqty <=10 then
        dbms_output.put_line('Product is running out of stock, Place the Order for '||v_pro);
    end if;
END;


------------------------------------------------------------------------------------------
3. ) Create  trigger on the employee table when the update is happened to employee's salary field. 
wirte the action to trigger to  Insert the employee's old salary in 	empoldsal table

  empoldsal  table
----------------------------
Field Name 	datatype
empid		number
firstname	varchar2(30)
Oldsalary	number


create or replace TRIGGER TRIGGERQ3 BEFORE UPDATE ON EMP1 for each row
BEGIN
  insert into empoldsal values(:old.job_id,:old.empid,:old.empname,:old.salary);
END;
------------------------------------------------------------------------------------------

4.Write trigger on emp table for the event of update to column of salary.
 when the salary is update to emp table stored old salary into empoldsal table. Display 'Record is inserted into empoldsal'.


CREATE OR REPLACE TRIGGER TRIGGERASSISNMENT4 AFTER UPDATE ON EMP1 for each row
BEGIN
   insert into empoldsal values(:old.job_id,:old.empid,:old.empname,:old.salary);
  dbms_output.put_line('record is inserted into empoldsal');
END;

-----------------------------------------------------------------------------------------
